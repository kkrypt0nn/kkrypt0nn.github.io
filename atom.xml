<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Krypton</title>
  
  <subtitle>&lt;a class=&quot;spotify&quot; href=&quot;https://status.krypton.ninja/spotify?open&quot;&gt; &lt;img id=&quot;spotify&quot; width=&quot;256&quot; height=&quot;64&quot; alt=&quot;Spotify Now Playing&quot;&gt;&lt;/a&gt;&lt;br&gt;Hewwo, I am Krypton _(coming from the Krypton element)_ or kkrypt0nn, which is mostly used for social media usernames. I&#39;m a small [developer](https://github.com/kkrypt0nn) and newbie [CTF player](/ctfs/). I like computers _(surprised?)_, programming and anything related to cyber security but most importantly: I love wolves ‚âß‚ó°‚â¶&lt;br&gt;&lt;ul&gt;&lt;li&gt;üõ†Ô∏è I&#39;m currently working on a **non data selling and privacy oriented social media** and some **offensive tools**.&lt;/li&gt;&lt;li&gt;üå± I&#39;m currently learning **Go** and **Reverse Engineering**.&lt;/li&gt;&lt;li&gt;üí≠ Ask me things about anything and I will try to answer.&lt;/li&gt;&lt;li&gt;üìá Contact me: [Krypton#7331](https://go.krypton.ninja/discord) on Discord, [@kkrypt0nn](https://go.krypton.ninja/twitter) on Twitter, per [Email](https://go.krypton.ninja/mail) or [kkrypt0nn](https://go.krypton.ninja/keybase) on Keybase.&lt;/li&gt;&lt;li&gt;üê∫üíú Fun facts: My favorite animal is a wolf and my favorite color is [#9C84EF](https://color-hex.com/color/9c84ef).&lt;/li&gt;&lt;/ul&gt;**I üíú open source**&lt;br&gt;&lt;br&gt;&lt;details&gt;&lt;summary&gt;üí∞ Donate Me&lt;/summary&gt;&lt;ul&gt;&lt;li&gt;&lt;i class=&quot;fa-brands fa-btc&quot;&gt;&lt;/i&gt; &lt;strong&gt;Bitcoin&lt;/strong&gt;: 31mGvXAhWJbhSwdgx9F2mVPguPRFCYYFwL&lt;/li&gt;&lt;li&gt;&lt;i class=&quot;fa-brands fa-ethereum&quot;&gt;&lt;/i&gt; &lt;strong&gt;Ethereum&lt;/strong&gt;: 0x20257228C9e94A13E4BB9578635c84403cAb6E60&lt;/li&gt;&lt;li&gt;&lt;em&gt;∆â&lt;/em&gt; &lt;strong&gt;Dogecoin&lt;/strong&gt;: D9hhH53pSe2KXPBvVQLe5G5FTvrmWnjtW4&lt;/li&gt;&lt;li&gt;&lt;i class=&quot;fa-brands fa-patreon&quot;&gt;&lt;/i&gt; &lt;strong&gt;Patreon&lt;/strong&gt;: Click [here](https://go.krypton.ninja/patreon)&lt;/li&gt;&lt;li&gt;&lt;i class=&quot;fa-solid fa-mug-saucer&quot;&gt;&lt;/i&gt; &lt;strong&gt;Ko-fi&lt;/strong&gt;: Click [here](https://go.krypton.ninja/kofi)&lt;/li&gt;&lt;li&gt;&lt;i class=&quot;fa-brands fa-paypal&quot;&gt;&lt;/i&gt; &lt;strong&gt;PayPal&lt;/strong&gt;: Click [here](https://go.krypton.ninja/paypal)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you donate with crypto currency, make sure you send the coins to the address corresponding to the currency. Sending to any other address will cause a loss of the coins and it will be impossible to recover, I am not responsible for an issue like that.&lt;/p&gt;&lt;/details&gt;</subtitle>
  <link href="https://krypton.ninja/atom.xml" rel="self"/>
  
  <link href="https://krypton.ninja/"/>
  <updated>2022-05-02T18:11:37.280Z</updated>
  <id>https://krypton.ninja/</id>
  
  <author>
    <name>Krypton</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>üöÄ Space Heroes 2022 CTF write-up</title>
    <link href="https://krypton.ninja/2022/04/03/Space-Heroes-2022-CTF-write-up/"/>
    <id>https://krypton.ninja/2022/04/03/Space-Heroes-2022-CTF-write-up/</id>
    <published>2022-04-03T16:51:13.000Z</published>
    <updated>2022-05-02T18:11:37.280Z</updated>
    
    <content type="html"><![CDATA[<img src="Banner.webp" /><p>The Space Heroes 2022 CTF was an online CTF from April 1st (4pm UTC) to April 3rd (9pm UTC) 2022. It was hosted by <a href="https://ctftime.org/team/65296">FITSEC </a> and it even was their first time organizing such an event! Lots of applause to them for their hard work üëè As a newbie CTF player, there were lots of challenges to have fun on and to successfully solve. This of course will improve my experience with CTFs and get me even more motivated to do more. The entire CTF was space themed, which made me even more motivated since I love space :D<br>I‚Äôve solved much more challenges compared to the <a href="https://krypton.ninja/2022/03/28/Insomnihack-2022-CTF-write-up/">Insomni‚Äôhack 2022 CTF</a>, one reason is that there was more time; and also that some challenges were much more easier. This was an overall awesome CTF, especially for me as a newbie. I‚Äôve learned a lot and hope to participate in their future CTFs!</p><p>The CTF ran another competition after the CTF ended where we were able to submit our write-ups and the best seven write-ups would get an <a href="https://en.wikipedia.org/wiki/International_Space_Station">ISS</a> sticker signed by <a href="https://nasa.gov/astronauts/biographies/andrew-r-morgan/biography/">US Astronaut Colonel Andrew Morgan</a>. I ended up being in the winners and got my sticker after some time:</p><img alt="Very original type of post-CTF competition" src="Sticker.jpg"><span class="image-caption">Very original type of post-CTF competition</span><p>So now let‚Äôs start the write-up - as always, all flags had the same format which was <code>shctf&#123;...&#125;</code>. Let‚Äôs get right into the write-up:</p><h2 id="üÜó-k"><a href="#üÜó-k" class="headerlink" title="üÜó k?"></a>üÜó k?</h2><p>This was a warm up challenge. The description said:</p><blockquote><p>MEE6 was busted! Help us out and unlock the flag in #mee6‚Ä¶</p></blockquote><p>So here it‚Äôs pretty obvious, let‚Äôs head over to <code>#mee6</code> on their Discord server and see what we can try out. When using the <code>/help commands</code> commaannd, you can see a list of custom commands made by the Discord server administrators. There was a command that looked interesting: <code>!k (optional text) - An awesome command!</code>.<br>When typing <code>!k</code> you will get the flag sent in your private messages by the bot: <code>k? shctf&#123;WhY_iS_K_BaNnEd&#125;  üò≠</code>. Free points for that one!</p><h2 id="üí¨-Discord"><a href="#üí¨-Discord" class="headerlink" title="üí¨ Discord"></a>üí¨ Discord</h2><p>Another challenge on Discord, this time the flag was hidden <em>somewhere</em> in the Discord server. I‚Äôve seen lots of people trying random things in the <code>#mee6</code> channel to get that flag while it said <em>somewhere</em>. So I‚Äôve used the search function to search for some flags; nothing. I looked at every channel topic and pinned messages; nothing alarming. But when I went back on the <code>#mee6</code> channel, I clicked on MEE6‚Äôs profile; and there it was. MEE6 had a custom role named: <code>shctf&#123;4ut0b0ts_r013_0u7&#125;</code>.</p><img alt="Evil MEE6..." src="discord.png" /><span class="image-caption">Evil MEE6...</span><h2 id="üõ°Ô∏è-Guardians-of-the-Galaxy"><a href="#üõ°Ô∏è-Guardians-of-the-Galaxy" class="headerlink" title="üõ°Ô∏è Guardians of the Galaxy"></a>üõ°Ô∏è Guardians of the Galaxy</h2><p>We are given a netcat connection and the binary of the program (<a href="files/guardians.bin">Download here</a>). When testing the program locally it crashes, but why? Let‚Äôs investigate by opening the file in a disassembler.</p><img alt="The crash source" src="crash.png" ><span class="image-caption">The crash source</span><p>This is the source of the crash, and it‚Äôs really easy to understand. If <code>fopen</code> returns <code>0x0</code>, then the file doesn‚Äôt exist, and therefore the binary crashes. So let‚Äôs create a dummy <code>flag.txt</code> file with the content <code>FLAG_____FLAG</code>. But before running the binary again, we can see that the data for the file is stored at the location <code>rbp-0x30</code> with a size of <code>0x20</code>.</p><img alt="Calling convention matters" src="fgets.png"><span class="image-caption">Calling convention matters</span><p>To confirm that, we can run the file with gdb and check the content:</p><img alt="Confirmed" src="gdb.png" /><span class="image-caption">Confirmed</span><p>The binary prints <strong>exactly</strong> what we send with <code>printf</code> according to this assembly code:</p><img alt="Our text is repeated" src="printf.png" /><span class="image-caption">Our text is repeated</span><p>So let‚Äôs use some string formats such as <code>%x</code> or others. When using <code>%p</code> we get a nice hexadecimal representation of the address returned. So let‚Äôs print lots of them.</p><img alt="Spam, spam, spam..." src="string_format.png" /><span class="image-caption">Spam, spam, spam...</span><p>When looking at the data being given back, we can see some hexadecimal values of ASCII characters. Starting at <code>0x6d697b6674636873</code> and ending at <code>0x55f6d2000a7d</code>. So let‚Äôs write a Python script to extract that data:</p><figure class="highlight python"><figcaption><span>Guardians of the Galaxy solver</span><a href="https://gist.github.com/kkrypt0nn/7bda0bc626c9ca5f0d127a8fcabdaa1c">guardians_of_the_galaxy.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Useless data:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x7ffd7417b6f0</span></span><br><span class="line"><span class="string">0x55f6d353b2a0</span></span><br><span class="line"><span class="string">0x2570257025702570</span></span><br><span class="line"><span class="string">0x2570257025702570</span></span><br><span class="line"><span class="string">0x2570257025702570</span></span><br><span class="line"><span class="string">0x70257025702570</span></span><br><span class="line"><span class="string">---------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Important data:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x6d697b6674636873</span></span><br><span class="line"><span class="string">0x636172747369645f</span></span><br><span class="line"><span class="string">0x756f795f676e6974</span></span><br><span class="line"><span class="string">0x55f6d2000a7d</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span>.join(</span><br><span class="line">    [</span><br><span class="line">        unhexlify(<span class="string">&quot;6d697b6674636873&quot;</span>)[::-<span class="number">1</span>],</span><br><span class="line">        unhexlify(<span class="string">&quot;636172747369645f&quot;</span>)[::-<span class="number">1</span>],</span><br><span class="line">        unhexlify(<span class="string">&quot;756f795f676e6974&quot;</span>)[::-<span class="number">1</span>],</span><br><span class="line">        unhexlify(<span class="string">&quot;55f6d2000a7d&quot;</span>)[::-<span class="number">1</span>],</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>This gave back: <code>b'shctf&#123;im_distracting_you&#125;\n\x00\xd2\xf6U'</code>, and there we have the flag, <code>shctf&#123;im_distracting_you&#125;</code>.</p><h2 id="üßë‚ÄçüöÄ-Space-traveler"><a href="#üßë‚ÄçüöÄ-Space-traveler" class="headerlink" title="üßë‚ÄçüöÄ Space traveler"></a>üßë‚ÄçüöÄ Space traveler</h2><p>We were given a URL: <code>https://spaceheroes-web-explore.chals.io</code>. When going on the website we could hit the <code>Guess The Flag</code> button. We had to give a flag as input and it would say if it‚Äôs valid or not. Looking at the network tab in the developers tool, not external requests were made. So the check is done locally. When looking at the source code there was some obfuscated source:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0xb645 = [<span class="string">&quot;\x47\x75\x65\x73\x73\x20\x54\x68\x65\x20\x46\x6C\x61\x67&quot;</span>, <span class="string">&quot;\x73\x68\x63\x74\x66\x7B\x66\x6C\x61\x67\x7D&quot;</span>, <span class="string">&quot;\x59\x6F\x75\x20\x67\x75\x65\x73\x73\x65\x64\x20\x72\x69\x67\x68\x74\x2E&quot;</span>, <span class="string">&quot;\x73\x68\x63\x74\x66\x7B\x65\x69\x67\x68\x74\x79\x5F\x73\x65\x76\x65\x6E\x5F\x74\x68\x6F\x75\x73\x61\x6E\x64\x5F\x6D\x69\x6C\x6C\x69\x6F\x6E\x5F\x73\x75\x6E\x73\x7D&quot;</span>, <span class="string">&quot;\x59\x6F\x75\x20\x67\x75\x65\x73\x73\x65\x64\x20\x77\x72\x6F\x6E\x67\x2E&quot;</span>, <span class="string">&quot;\x69\x6E\x6E\x65\x72\x48\x54\x4D\x4C&quot;</span>, <span class="string">&quot;\x64\x65\x6D\x6F&quot;</span>, <span class="string">&quot;\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _0xb729x2;</span><br><span class="line">    <span class="keyword">let</span> _0xb729x3 = <span class="title function_">prompt</span>(_0xb645[<span class="number">0</span>], _0xb645[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">switch</span> (_0xb729x3) &#123;</span><br><span class="line">        <span class="keyword">case</span> _0xb645[<span class="number">3</span>]:</span><br><span class="line">            _0xb729x2 = _0xb645[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            _0xb729x2 = _0xb645[<span class="number">4</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">document</span>[_0xb645[<span class="number">7</span>]](_0xb645[<span class="number">6</span>])[_0xb645[<span class="number">5</span>]] = _0xb729x2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When looking at it, we can see it‚Äôs obfuscated, so let‚Äôs <a href="https://deobfuscate.io/">deobfuscate it</a>!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> azante;</span><br><span class="line">  <span class="keyword">let</span> karynna = <span class="title function_">prompt</span>(<span class="string">&quot;Guess The Flag&quot;</span>, <span class="string">&quot;shctf&#123;flag&#125;&quot;</span>);</span><br><span class="line">  <span class="keyword">switch</span> (karynna) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;shctf&#123;eighty_seven_thousand_million_suns&#125;&quot;</span>:</span><br><span class="line">      azante = <span class="string">&quot;You guessed right.&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      azante = <span class="string">&quot;You guessed wrong.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = azante;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Well, that‚Äôs much more readable and we can see the flag in plaintext: <code>shctf&#123;eighty_seven_thousand_million_suns&#125;</code>.</p><h2 id="üïµÔ∏è‚Äç‚ôÇÔ∏è-Curious"><a href="#üïµÔ∏è‚Äç‚ôÇÔ∏è-Curious" class="headerlink" title="üïµÔ∏è‚Äç‚ôÇÔ∏è Curious?"></a>üïµÔ∏è‚Äç‚ôÇÔ∏è Curious?</h2><p>This challenge was pretty straight forward, it was an OSINT challenge. For this one is was basically <em>‚ÄúWho can search better on Google?‚Äù</em>. Well in my case, I used <a href="https://tineye.com/">TinEye</a> since we were given a picture:</p><img alt="Isn't Curiosity amazing?" src="curiosity.png" /><span class="image-caption">Isn't Curiosity amazing?</span><p>When searching for that picture, there were some websites that had this picture. Here is a list of them:<br><del><a href="http://www.dailytechinfo.org/tags/%C7%E0%E4%E5%F0%E6%EA%E0/">http://www.dailytechinfo.org/tags/%C7%E0%E4%E5%F0%E6%EA%E0/</a></del> - Russian, nothing important for the challenge<br><del><a href="https://dailytechinfo.org/space/5613-marsohod-curiosity-napolovinu-preodolel-voznikshee-pered-nim-prepyatstvie.html">https://dailytechinfo.org/space/5613-marsohod-curiosity-napolovinu-preodolel-voznikshee-pered-nim-prepyatstvie.html</a></del> - Russian, nothing important for the challenge<br><del><a href="http://news.discovery.com/space/the-moment-when-curiosity-breached-a-mars-dune-140205.htm">http://news.discovery.com/space/the-moment-when-curiosity-breached-a-mars-dune-140205.htm</a></del> - Offline<br><a href="https://www.hjkc.de/_blog/2014/02/05/2391-mars-curiosity-chroniken---curiosity-news-sol-529-533/">https://www.hjkc.de/_blog/2014/02/05/2391-mars-curiosity-chroniken---curiosity-news-sol-529-533/</a> - Could be interesting<br><a href="https://www.space.com/24592-mars-rover-curiosity-dune-jump.html">https://www.space.com/24592-mars-rover-curiosity-dune-jump.html</a> - Could be interesting</p><p>When looking at the last result, it clearly has as title <em>‚ÄúThe Moment When Curiosity Breached a Mars Dune‚Äù</em>. Considering the flag format was given, <code>shctf&#123;SOL_xxx&#125;</code>, we can see that this picture was taken at SOL 533. So pretty simple, right? <code>shctf&#123;SOL_533&#125;</code> is the flag.<br>The other website, hjkc.de also contained the SOL 533 picture, you just have to scroll <em>a lot</em>.</p><h2 id="üöÄ-Launched"><a href="#üöÄ-Launched" class="headerlink" title="üöÄ Launched"></a>üöÄ Launched</h2><p>Another OSINT challenge, this time we are given the picture of a rocket that just launched.</p><img alt="Just awesome to see that.." src="launched.jpg" /><span class="image-caption">Just awesome to see that..</span><p>Considering the flag format was <code>shctf&#123;rocket_payload&#125;</code>, it‚Äôs pretty easy to know we need to find the rocket and its payload name. It‚Äôs also the first time I know payloads can have names ü§Ø<br>So let‚Äôs get <em>exiftool</em> in my hands. When looking at the data we got back, we can see some interesting information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ExifTool Version Number         : 12.40</span><br><span class="line">File Name                       : launched.jpg</span><br><span class="line">...</span><br><span class="line">Date/Time Original              : 2019:04:11 18:36:33</span><br><span class="line">Create Date                     : 2019:04:11 18:36:33</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>One of them being the exact date and time when the picture was taken. So we can see that the rocket was launched at <code>2019:04:11 18:36:33</code>. Just need to find the rocket name and its payload now.<br>A simple Google search showed that the rocket was a <a href="https://www.cnbc.com/2019/04/11/livestream-watch-spacex-falcon-heavy-rocket-launch-and-landing.html">Falcon Heavy</a>. Now we need the payload name; let‚Äôs try <a href="https://en.wikipedia.org/wiki/Falcon_Heavy#Launches_and_payloads">Wikipedia</a>. Yup, there we go:</p><img alt="Interesting that payloads have names..." src="payload.png" /><span class="image-caption">Interesting that payloads have names...</span><p>So now let‚Äôs put everything in the flag format, <code>shctf&#123;rocket_payload&#125;</code>, and we get <code>shctf&#123;falcon_heavy_arabsat-6A&#125;</code>.</p><h2 id="üåå-Flag-in-space"><a href="#üåå-Flag-in-space" class="headerlink" title="üåå Flag in space"></a>üåå Flag in space</h2><p>A web challenge. We are greeted with a website that has a grid with empty content. We URL was <a href="http://172.105.154.14/?flag=">http://172.105.154.14/?flag=</a>, so let‚Äôs try to put some garbage in the GET parameter. When trying some characters you can see that some grids now contain the character that was correct, so if you put the <code>flag</code> parameter to <code>shctf&#123;aaa</code>, you get the following:</p><img alt="The flag is not encoded, phew" src="grid.png" /><span class="image-caption">The flag is not encoded, phew</span><p>Looking at the source code it‚Äôs a basic <code>&lt;div&gt;s&lt;/div&gt;</code> for every character. We could try each character ourselves but some flags are known to have special characters or numbers so it would take ages. Therefore I made a simple script that appends every character, and if it gets the <code>&lt;div&gt;</code> element, then it gets added in a variable <code>res</code>. I‚Äôve already put the known characters as an element in the <code>res</code> variable.<br>Then we simply make a request with all the characters from <code>res</code> and append the currently looped character. Here is my source code, you might understand it better:</p><figure class="highlight python"><figcaption><span>Flag in space</span><a href="https://gist.github.com/kkrypt0nn/6bc38756350cb3d7443b3cea831831fd">flag_in_space.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">flag = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>]</span><br><span class="line">res = [<span class="string">&quot;s&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;&#123;&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0x21</span>, <span class="number">0x7d</span>):</span><br><span class="line">        char = <span class="built_in">chr</span>(j)</span><br><span class="line">        url = <span class="string">&quot;http://172.105.154.14/?flag=&quot;</span> + <span class="string">&quot;&quot;</span>.join(res) + char</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        response = <span class="string">&quot;&quot;</span>.join(r.text.split())</span><br><span class="line">        previous = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(res)):</span><br><span class="line">            previous += <span class="string">&quot;&lt;div&gt;&quot;</span> + res[k] + <span class="string">&quot;&lt;/div&gt;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">f&quot;<span class="subst">&#123;previous&#125;</span>&lt;div&gt;<span class="subst">&#123;char&#125;</span>&lt;/div&gt;&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">            res += char</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(res), end=<span class="string">&quot;\r&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(res))</span><br></pre></td></tr></table></figure><p>After quite some time, the script gives the following flag back: <code>shctf&#123;2_explor3_fronti3r&#125;</code>.</p><h2 id="ü§ñ-R2D2"><a href="#ü§ñ-R2D2" class="headerlink" title="ü§ñ R2D2"></a>ü§ñ R2D2</h2><p>Looking back at this one, it was pretty obvious‚Ä¶ We are greeted on a website that looks like that:</p><img alt="I personally don't like Star Wars :D" src="r2d2.png" /><span class="image-caption">I personally don't like Star Wars :D</span><p>Looking at the source code, nothing. Looking at the local storage, nothing. Looking at the cookies, nothing. I decided to run <em>gobuster</em> on the website with a <a href="https://github.com/kkrypt0nn/Wordlists/blob/master/directory_scanner/common.txt">wordlist</a>. Guess what kind of file was detected‚Ä¶ <strong>robots.txt</strong>, of course‚Ä¶‚Ä¶</p><img alt="This shows my lack of experience" src="gobuster.png" /><span class="image-caption">This shows my lack of experience</span><p>Getting on that file gives the flag back, <code>shctf&#123;th1s-aster0id-1<span>$</span>-n0t-3ntir3ly-stable&#125;</code>.</p><h2 id="üåü-Starman"><a href="#üåü-Starman" class="headerlink" title="üåü Starman"></a>üåü Starman</h2><p>Another OSINT challenge. This time the description says already a lot:</p><blockquote><p>How far away from earth was the space car on January, 20 2021 at 1515 UTC? Enter distance in terms of Million Km. (Rounded to two decimals) (e.g shctf{12.34})</p></blockquote><p>Searching up on Google what the <em>space car</em> is, I came across <a href="https://theskylive.com/roadster-info">this website</a>. And at the right we can give a date and time, and we get an <a href="https://theskylive.com/planetarium?obj=roadster&date=2021-01-20&h=15&m=15">awesome map</a>. When looking at the map we see that it was at <code>56.68</code> million km away from earth. Therefore the flag was: <code>shctf&#123;56.68&#125;</code>.</p><h2 id="üêï-Space-Buds"><a href="#üêï-Space-Buds" class="headerlink" title="üêï Space Buds"></a>üêï Space Buds</h2><blockquote><p>One of the puppies got into the web server. Can you help find out who it was?</p></blockquote><p>With that description there also was a picture of the Space Buds.</p><img alt="Cute dogs :)" src="spacebuds.jpg" /><span class="image-caption">Cute dogs :)</span><p>There also was a website, that pretty much contained <em>nothing</em>. But when inspecting the source code, there was a hidden input element.</p><img alt="The background is horrible" src="hacker.png" /><span class="image-caption">The background is horrible</span><p>So I searched up on the Internet what the names of the puppies were and put them one by one in the input field. But still nothing. However, when sending the form, there was a request made to <code>/getcookie</code>. So maybe there‚Äôs something in my cookies?</p><img alt="Nothing big. Right?" src="cookies.png" /><span class="image-caption">Nothing big. Right?</span><p>But we can <strong>change</strong> the value of that cookie, so let‚Äôs put the name of each dog in the cookie and reload the page. When typing <em>Mudbud</em>, there was a flag given. </p><img alt="Please next time put some better quality" src="mudbud.png" /><span class="image-caption">Please next time put some better quality</span><p>After literally <em>decrypting</em> that flag, it results to <code>shctf&#123;tastes_like_raspberries&#125;</code>.</p><h2 id="üõ∞Ô∏è-Cape-Kennedy"><a href="#üõ∞Ô∏è-Cape-Kennedy" class="headerlink" title="üõ∞Ô∏è Cape Kennedy"></a>üõ∞Ô∏è Cape Kennedy</h2><p>This was a reversing challenge. We were given a Python file that contains a password check.</p><figure class="highlight python"><figcaption><span>Cape Kennedy reverse</span><a href="https://gist.github.com/kkrypt0nn/67cfbf20500b9452fd5d6ff4573369ff">cape_kennedy.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Invalid args&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  password = sys.argv[<span class="number">1</span>]</span><br><span class="line">  builder = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> c <span class="keyword">in</span> password:</span><br><span class="line">    builder += <span class="built_in">ord</span>(c)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> builder == <span class="number">713</span> <span class="keyword">and</span> <span class="built_in">len</span>(password) == <span class="number">8</span> <span class="keyword">and</span> (<span class="built_in">ord</span>(password[<span class="number">2</span>]) == <span class="built_in">ord</span>(password[<span class="number">5</span>])):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ord</span>(password[<span class="number">3</span>]) == <span class="built_in">ord</span>(password[<span class="number">4</span>])) <span class="keyword">and</span> ((<span class="built_in">ord</span>(password[<span class="number">6</span>])) == <span class="built_in">ord</span>(password[<span class="number">7</span>])):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;correct&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;incorrect&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;incorrect&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure><p>This one was quite easy to reverse. The password must have a length of 8. The characters and index 2 and 5 must be the same, the characters at index 3 and 4 must be the same and the characters and index 6 and 7 must be the same. The sum of the hexadecimal value of the characters must be 713.<br>Let‚Äôs make a bruteforce script:</p><figure class="highlight python"><figcaption><span>Cape Kennedy bruteforce</span><a href="https://gist.github.com/kkrypt0nn/0d4f658978524fb3a7c77e2395ca341f">cape_kennedy_bruteforce.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line"></span><br><span class="line">pwds = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s = [<span class="string">&quot;A&quot;</span>]*<span class="number">8</span></span><br><span class="line">        s[<span class="number">0</span>] = random.choice(ascii_letters)</span><br><span class="line">        s[<span class="number">1</span>] = random.choice(ascii_letters)</span><br><span class="line">        s[<span class="number">2</span>] = random.choice(ascii_letters)</span><br><span class="line">        s[<span class="number">5</span>] = s[<span class="number">2</span>]</span><br><span class="line">        s[<span class="number">3</span>] = random.choice(ascii_letters)</span><br><span class="line">        s[<span class="number">4</span>] = s[<span class="number">3</span>]</span><br><span class="line">        s[<span class="number">6</span>] = random.choice(ascii_letters)</span><br><span class="line">        s[<span class="number">7</span>] = s[<span class="number">6</span>]</span><br><span class="line">        builder = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        password = <span class="string">&quot;&quot;</span>.join(s)</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> password:</span><br><span class="line">            builder += <span class="built_in">ord</span>(c)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (builder == <span class="number">713</span> <span class="keyword">and</span> <span class="built_in">len</span>(password) == <span class="number">8</span> <span class="keyword">and</span> (<span class="built_in">ord</span>(password[<span class="number">2</span>]) == <span class="built_in">ord</span>(password[<span class="number">5</span>]))):</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">ord</span>(password[<span class="number">3</span>]) == <span class="built_in">ord</span>(password[<span class="number">4</span>])) <span class="keyword">and</span> ((<span class="built_in">ord</span>(password[<span class="number">6</span>])) == <span class="built_in">ord</span>(password[<span class="number">7</span>])):</span><br><span class="line">                <span class="keyword">if</span> password <span class="keyword">not</span> <span class="keyword">in</span> pwds:</span><br><span class="line">                    pwds.append(password)</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;moon.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(password + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">solve()</span><br></pre></td></tr></table></figure><p>And yes, there was <strong>A LOT</strong> of valid passwords, over 3 millions.<br>Considering it was space themed (It was mentioned in the description of the challenge again.), I searched what happened at Cape Kennedy and that was related to the moon, since the file was named <code>moon.py</code>. It didn‚Äôt took long until I‚Äôve found that Apollo 11 started from there, a historic moment in space exploration! Looking at the results in <code>moon.txt</code> I‚Äôve found a string generated that was <code>APOllOaa</code>. So with the knowledge of before and that valid string, the flag is simply <code>shctf&#123;Apollo11&#125;</code>.</p><h2 id="‚≠ê-Star-Pcap"><a href="#‚≠ê-Star-Pcap" class="headerlink" title="‚≠ê Star Pcap"></a>‚≠ê Star Pcap</h2><p>There was no description, just a pcap file (<a href="files/star.pcap">Download here</a>). When opening the file with Wireshark, we can see that there is just one slight change in all those ICMP packets, which is the ICMP code.<br>Using <code>pyshark</code> it was easy to put all these codes together, convert them to an decimal value and then to a character.</p><figure class="highlight python"><figcaption><span>Star Pcap solver</span><a href="https://gist.github.com/kkrypt0nn/adb3595e2ec5bbfd991724fae1cec68f">star.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"></span><br><span class="line">capture = pyshark.FileCapture(<span class="string">&quot;star.pcap&quot;</span>)</span><br><span class="line">data = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> capture:</span><br><span class="line">    data += <span class="built_in">chr</span>(<span class="built_in">int</span>(packet.layers[<span class="number">2</span>]._all_fields[<span class="string">&quot;icmp.code&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>This resulted in the following string: <code>c2hjdGZ7TDBnMWMtaSQtdGgzLWJlZ2lOTmluZy0wZi13aSRkb019</code>. Typical for CTFs, the data is base64 encoded. After decoding it, we can get the flag: <code>shctf&#123;L0g1c-i<span>$</span>-th3-begiNNing-0f-wi<span>$</span>doM&#125;</code>.</p><h2 id="üëÅÔ∏è‚Äçüó®Ô∏è-Mysterious-Broadcast"><a href="#üëÅÔ∏è‚Äçüó®Ô∏è-Mysterious-Broadcast" class="headerlink" title="üëÅÔ∏è‚Äçüó®Ô∏è Mysterious Broadcast"></a>üëÅÔ∏è‚Äçüó®Ô∏è Mysterious Broadcast</h2><p>Another web challenge.</p><blockquote><p>There used to be 8 Models of humanoid cylon but now there are only 7. We‚Äôve located one of their broadcast nodes but we can‚Äôt decode it. Are you able to decipher their technologies?</p></blockquote><p>When going on the website, there is a random ID generated in the URL, it looks like this: <a href="http://173.230.134.127/seq/710a1f63-57b9-4b86-a880-f413418375d9">http://173.230.134.127/seq/710a1f63-57b9-4b86-a880-f413418375d9</a><br>The website had nothing besides an <code>~</code> as response, interesting. When reloading; it turned to a 1, when reloading again; it didn‚Äôt changed. But when reloading for the third time, it turned to a 0. Here is how it looked like:</p><img alt="You probably don't want to write one by one" src="reload.png" /><span class="image-caption">You probably don't want to write one by one</span><p><strong>Binary!</strong> But I don‚Äôt want to write everything down as it might be a lot of 0‚Äôs and 1‚Äôs in the end, so let‚Äôs make a quick Python script and save the output in a variable:</p><figure class="highlight python"><figcaption><span>Mysterious Broadcast data gatherer</span><a href="https://gist.github.com/kkrypt0nn/9ff087bc8fb5036231062a634d0211c2">mysterious_broadcast.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = requests.get(<span class="string">&quot;http://173.230.134.127/seq/710a1f63-57b9-4b86-a880-f413418375d9&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (r.text == <span class="string">&quot;~&quot;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    binary += r.text</span><br><span class="line">    <span class="built_in">print</span>(binary)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n[+] Received: &quot;</span> + binary)</span><br><span class="line"><span class="comment"># 1100011011001011010001101010110010010001111011010011011110100011011000100111011010101100001101011111011001001010110001101100001000101011001110100011101101110110001100001010101011001110100101101000110001011011011010010110100011000111101101101001001110011000011110011101111010111101</span></span><br></pre></td></tr></table></figure><p>Here we go, we got the binary and now we can just decode it.</p><p><code>√Ü√ãF¬¨¬ë√≠7¬£bv¬¨5√∂J√Ü√Ç+:;v0¬™√é¬ñ¬å[ih√á¬∂¬ì¬òy√û¬Ω</code> ehhh, I don‚Äôt think that‚Äôs correct ü§î Let‚Äôs look at the description again - <code>There used to be *8* Models of humanoid cylon but now there are only *7*. [...]</code>. Remember, when representing a character, for example <strong>A</strong>, in binary there are <strong>8</strong> 1‚Äôs or 0‚Äôs such as <code>01000001</code>. And according to the description, there are now only <strong>7</strong>. So let‚Äôs put a space every 7th character and decode that.<br>Most of the decoders give the same output, as they don‚Äôt take in consideration the space. But <a href="https://rapidtables.com/convert/number/binary-to-ascii.html">this one</a> did take in consideration the space. It resulted in <code>c2hjdGZ7QXNjaWlJc0E3Qml0U3RhbmRhcmR9Cg==</code>. Again, the <code>==</code> is typical for base64 encoding. So let‚Äôs decode it: <code>shctf&#123;AsciiIsA7BitStandard&#125;</code>.</p><h2 id="üêà-Space-Captain-Garfield"><a href="#üêà-Space-Captain-Garfield" class="headerlink" title="üêà Space Captain Garfield"></a>üêà Space Captain Garfield</h2><p>This one was more about OSINT at the beginning. We have the following picture:</p><img alt="What on Earth is that..." src="space_captain_garfield.png" /><span class="image-caption">What on Earth is that...</span><p>There was just the number <code>2254</code> not <em>encrypted</em>. So by searching <code>garfield dreaming 2254</code> on Google I‚Äôve found this picture:</p><img alt="The fun is coming..." src="garfield.png" /><span class="image-caption">The fun is coming...</span><p>So yes, what had to be done was to map each character to its sign and then reconstruct the flag in the last picture. I started and got <code>shctf&#123;lasa..alo.er&#125;</code>, after some guessing for the last ones it was <code>shctf&#123;lasagnalover&#125;</code>.</p><h2 id="üö©-Netflix-and-CTF"><a href="#üö©-Netflix-and-CTF" class="headerlink" title="üö© Netflix and CTF"></a>üö© Netflix and CTF</h2><p>This one was very similar to the Star Pcap challenge above. We are given a pcap file (<a href="files/netflix-and-ctf.pcap">Download here</a>) and we have to analyze it. When looking at it, there is always request made to <code>http://10.10.100.124:8060/keypress/Lit_X</code> where <code>X</code> always varies. Sometimes there is a request made to <code>/browse</code>, this puts a line between the keypresses, and show names.<br>So let‚Äôs make a Python script using <em>tshark</em> again and save the output of each show in a list:</p><figure class="highlight python"><figcaption><span>Netflix and CTF data gatherer</span><a href="https://gist.github.com/kkrypt0nn/aa1b77498c73f841c9e7ddcb25f15a9b">netflix_and_ctf.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">capture = pyshark.FileCapture(<span class="string">&quot;netflix-and-ctf.pcap&quot;</span>)</span><br><span class="line">data = []</span><br><span class="line"></span><br><span class="line">show_data = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> capture:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;browse&quot;</span> <span class="keyword">in</span> packet.layers[<span class="number">3</span>]._all_fields[<span class="string">&quot;http.response_for.uri&quot;</span>]:</span><br><span class="line">            data.append(show_data)</span><br><span class="line">            show_data = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        show_data += urllib.parse.unquote(packet.layers[<span class="number">3</span>]._all_fields[<span class="string">&quot;http.response_for.uri&quot;</span>].replace(<span class="string">&quot;http://10.10.100.124:8060/keypress/Lit_&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> show <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;shctf&quot;</span> <span class="keyword">in</span> show:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Special show found: <span class="subst">&#123;show&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>The special show found was: <code>shctf&#123;T1m3-is-th3-ultimat3-curr3Ncy&#125;</code>.</p><h2 id="üö¶-Strange-Traffic"><a href="#üö¶-Strange-Traffic" class="headerlink" title="üö¶ Strange Traffic"></a>üö¶ Strange Traffic</h2><p>My favorite forensics challenge. We were given again a pcap file (<a href="files/strangetraffic.pcap">Download here</a>). There also was a free hint, so let‚Äôs take it:</p><blockquote><p>Hint: alt,esc,1,2,3,4,5,6,7,8,9,0,-,&#x3D;,backspace,tab,q,w,‚Ä¶</p></blockquote><p>All right, now let‚Äôs investigate the pcap file.</p><img alt="Only UDP packets, this one will be easy." src="strange.png" /><span class="image-caption">Only UDP packets, this one will be easy.</span><p>The number encircled in purple is the only number that changes and appears in all packets. So we need to get this value for each packet. For this example, the <code>35</code> is formed thanks to the <code>33</code> and <code>35</code> which if decoded to in the ASCII table, they are <code>3</code> and <code>5</code>. Now with <code>35</code> what can we do? Let‚Äôs look at the hint again. It‚Äôs clearly a keyboard layout. Now if we look at the query keyboard layout that was sent on Discord:</p><img alt="I've never used such a keyboard" src="qwerty.png" /><span class="image-caption">I've never used such a keyboard</span><p>If we start counting each key and count up to <code>35</code>, we get the key <code>s</code>, which could fit for the <code>s</code> in the <code>shctf&#123;...&#125;</code> format. After checking with the other packets, this theory is right. Now let‚Äôs code a script for that:</p><figure class="highlight python"><figcaption><span>Strange Traffic decoder</span><a href="https://gist.github.com/kkrypt0nn/a616bab5b17ec8533dac4036fe855a56">strange_traffic.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark, binascii</span><br><span class="line"></span><br><span class="line">capture = pyshark.FileCapture(<span class="string">&quot;strangetraffic.pcap&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Map the entire keyboard</span></span><br><span class="line"><span class="built_in">map</span> = &#123;</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="string">&quot;`&quot;</span>,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;3&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;4&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;5&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;6&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;7&quot;</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;8&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;9&quot;</span>: <span class="string">&quot;8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;10&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;11&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;12&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;13&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">    <span class="string">&quot;14&quot;</span>: <span class="string">&quot;&lt;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;15&quot;</span>: <span class="string">&quot;tab&quot;</span>,</span><br><span class="line">    <span class="string">&quot;16&quot;</span>: <span class="string">&quot;q&quot;</span>,</span><br><span class="line">    <span class="string">&quot;17&quot;</span>: <span class="string">&quot;w&quot;</span>,</span><br><span class="line">    <span class="string">&quot;18&quot;</span>: <span class="string">&quot;e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;19&quot;</span>: <span class="string">&quot;r&quot;</span>,</span><br><span class="line">    <span class="string">&quot;20&quot;</span>: <span class="string">&quot;t&quot;</span>,</span><br><span class="line">    <span class="string">&quot;21&quot;</span>: <span class="string">&quot;y&quot;</span>,</span><br><span class="line">    <span class="string">&quot;22&quot;</span>: <span class="string">&quot;u&quot;</span>,</span><br><span class="line">    <span class="string">&quot;23&quot;</span>: <span class="string">&quot;i&quot;</span>,</span><br><span class="line">    <span class="string">&quot;24&quot;</span>: <span class="string">&quot;o&quot;</span>,</span><br><span class="line">    <span class="string">&quot;25&quot;</span>: <span class="string">&quot;p&quot;</span>,</span><br><span class="line">    <span class="string">&quot;26&quot;</span>: <span class="string">&quot;[&quot;</span>,</span><br><span class="line">    <span class="string">&quot;27&quot;</span>: <span class="string">&quot;]&quot;</span>,</span><br><span class="line">    <span class="string">&quot;28&quot;</span>: <span class="string">&quot;enter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;29&quot;</span>: <span class="string">&quot;caps&quot;</span>,</span><br><span class="line">    <span class="string">&quot;30&quot;</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;31&quot;</span>: <span class="string">&quot;s&quot;</span>,</span><br><span class="line">    <span class="string">&quot;32&quot;</span>: <span class="string">&quot;d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;33&quot;</span>: <span class="string">&quot;f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;34&quot;</span>: <span class="string">&quot;g&quot;</span>,</span><br><span class="line">    <span class="string">&quot;35&quot;</span>: <span class="string">&quot;h&quot;</span>,</span><br><span class="line">    <span class="string">&quot;36&quot;</span>: <span class="string">&quot;j&quot;</span>,</span><br><span class="line">    <span class="string">&quot;37&quot;</span>: <span class="string">&quot;k&quot;</span>,</span><br><span class="line">    <span class="string">&quot;38&quot;</span>: <span class="string">&quot;l&quot;</span>,</span><br><span class="line">    <span class="string">&quot;39&quot;</span>: <span class="string">&quot;;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;40&quot;</span>: <span class="string">&quot;&#x27;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;41&quot;</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">    <span class="string">&quot;42&quot;</span>: <span class="string">&quot;shift&quot;</span>,</span><br><span class="line">    <span class="string">&quot;43&quot;</span>: <span class="string">&quot;\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;44&quot;</span>: <span class="string">&quot;z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;45&quot;</span>: <span class="string">&quot;x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;46&quot;</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;47&quot;</span>: <span class="string">&quot;v&quot;</span>,</span><br><span class="line">    <span class="string">&quot;48&quot;</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;49&quot;</span>: <span class="string">&quot;n&quot;</span>,</span><br><span class="line">    <span class="string">&quot;50&quot;</span>: <span class="string">&quot;m&quot;</span>,</span><br><span class="line">    <span class="string">&quot;51&quot;</span>: <span class="string">&quot;,&quot;</span>,</span><br><span class="line">    <span class="string">&quot;52&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;53&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;54&quot;</span>: <span class="string">&quot;ctrl&quot;</span>,</span><br><span class="line">    <span class="string">&quot;55&quot;</span>: <span class="string">&quot;win&quot;</span>,</span><br><span class="line">    <span class="string">&quot;56&quot;</span>: <span class="string">&quot;alt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;57&quot;</span>: <span class="string">&quot;space&quot;</span>,</span><br><span class="line">    <span class="string">&quot;58&quot;</span>: <span class="string">&quot;alt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;59&quot;</span>: <span class="string">&quot;win&quot;</span>,</span><br><span class="line">    <span class="string">&quot;60&quot;</span>: <span class="string">&quot;menu&quot;</span>,</span><br><span class="line">    <span class="string">&quot;61&quot;</span>: <span class="string">&quot;ctrl&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> capture:</span><br><span class="line">    payload = packet.layers[<span class="number">2</span>]._all_fields[<span class="string">&quot;udp.payload&quot;</span>][<span class="number">75</span>:].split(<span class="string">&quot;:&quot;</span>) <span class="comment"># Ignore the fist 75 characters from the payload</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(payload)):</span><br><span class="line">        payload[i] = <span class="built_in">str</span>(binascii.unhexlify(payload[i]), <span class="string">&quot;ascii&quot;</span>) <span class="comment"># Coinvert to ASCII representation</span></span><br><span class="line">    flag.append(<span class="string">&quot;&quot;</span>.join(payload))</span><br><span class="line"></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> flag:</span><br><span class="line">    res += <span class="built_in">map</span>[<span class="built_in">str</span>(f)]</span><br><span class="line"><span class="built_in">print</span>(res.replace(<span class="string">&quot;shift[&quot;</span>, <span class="string">&quot;&#123;&quot;</span>).replace(<span class="string">&quot;shift]&quot;</span>, <span class="string">&quot;&#125;&quot;</span>).replace(<span class="string">&quot;enter&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;space&quot;</span>, <span class="string">&quot;_&quot;</span>)) <span class="comment"># Description said we can swap spaces with underscores</span></span><br></pre></td></tr></table></figure><p>In the end we get the following flag: <code>shctf&#123;thanks_f0r_th3_t4nk._he_n3ver_get5_me_anyth1ng&#125;</code>.</p><h2 id="üîÆ-Future-Stego"><a href="#üîÆ-Future-Stego" class="headerlink" title="üîÆ Future Stego"></a>üîÆ Future Stego</h2><p>For this challenge there were two pictures, one to download which was:</p><img alt="The quality is insane" src="shuttle.jpg" /><span class="image-caption">The quality is insane</span><p>There also was another picture in the description, as a hint:</p><img alt="I wasn't born when this was published x)" src="newspaper.jpg" /><span class="image-caption">I wasn't born when this was published x)</span><p>After trying lots of steganography techniques, I couldn‚Äôt find any that lead me to the flag. One of the last was to use <code>stegcracker</code>. I tried to bruteforce the password with the rockyou wordlist, but stopped at around 300‚Äô000 words tried. Nothing.<br>But the picture wasn‚Äôt here for <strong>nothing</strong>.. Let‚Äôs try some passwords that are in the news paper picture and use <code>steghide --extract -sf shuttle.jpg</code>. After playing around and trying some combinations such as <code>spacewoman</code>, <code>newsweek</code> or <code>sally k. ride</code>, I tried the file name: <code>sallyride</code>. This was the password and extracted a text file which contained the flag: <code>shctf&#123;weightlessness_is_a_great_equalizer&#125;</code>. It also would‚Äôve worked with <code>stegcracker</code> and the right password in a text file.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;Banner.webp&quot; /&gt;

&lt;p&gt;The Space Heroes 2022 CTF was an online CTF from April 1st (4pm UTC) to April 3rd (9pm UTC) 2022. It was hoste</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://krypton.ninja/tags/ctf/"/>
    
    <category term="write-up" scheme="https://krypton.ninja/tags/write-up/"/>
    
    <category term="space heroes" scheme="https://krypton.ninja/tags/space-heroes/"/>
    
  </entry>
  
  <entry>
    <title>üö© Insomni&#39;hack 2022 CTF write-up</title>
    <link href="https://krypton.ninja/2022/03/28/Insomnihack-2022-CTF-write-up/"/>
    <id>https://krypton.ninja/2022/03/28/Insomnihack-2022-CTF-write-up/</id>
    <published>2022-03-28T15:23:11.000Z</published>
    <updated>2022-04-05T18:08:06.284Z</updated>
    
    <content type="html"><![CDATA[<img src="Banner.webp"/><p>The Insomni‚Äôhack 2022 CTF is a CTF hosted during the Insomni‚Äôhack conference in Geneva, Switzerland. You had to register yourself so that you can attend to the on-site CTF. There was a total of 31 challenges. As a beginner in CTFs I decided to mostly take the easy challenges. The CTF was from March 25 (6pm UTC) to March 26 (4am UTC) 2022.<br>As my first on-site CTF it was nice to see how many people were participating. It was also pretty amazing to see how some people were prepared; some people even decided to transport their own <em>big</em> monitor(s) ü§Ø It was an overall amazing CTF, so many thanks to the organizers!<br>All flags had the same format which was <code>INS&#123;...&#125;</code>. Anways, enough talking, here are the write-ups:</p><h2 id="üêõ-GDBug-120-points"><a href="#üêõ-GDBug-120-points" class="headerlink" title="üêõ GDBug - 120 points"></a>üêõ GDBug - 120 points</h2><p>We were given a binary file (<a href="files/gdbug.bin">Download the file</a>) that we had to execute to get the right flag. Let‚Äôs start by running it with basic <code>./gdbug</code>:<br>When executing the file, a serial number to check needs to be given as an argument. After providing one as argument it would check the serial and return if it was a valid one or not. So let‚Äôs open up the binary in a disassembler and see how it works.</p><img alt="There also was another, invalid, flag in the strings" src="gdbug_start.png"><span class="image-caption">There also was another, invalid, flag in the strings</span><p>Looking at the top there was <code>--debug</code>, after running the binary with that serial it wasn‚Äôt a success; <code>INS&#123;Th1<span>$</span>Fl4gSuck<span>$</span>&#125;</code>. There also was a call to <code>ptrace()</code>, typical anti-debugging trick. If the binary was to be run from any debugger it would give this flag <code>INS&#123;W0ULDNT-1T-B3-T00-34SY&#125;</code>. Simply NOPing the entire ptrace check was enough to bypass it, now the binary can be ran in a debugger if needed. So let‚Äôs look at how the check for the serial works:</p><img alt="A loop that will iterate over the length of the given serial" src="gdbug_loop.png"><span class="image-caption">A loop that will iterate over the length of the given serial</span><p>At first there is a variable <code>x</code> initialized with the value <code>0x539</code>, then a new variable <code>i</code> initialized with the value <code>0x0</code>. After that, a loop starts:</p><ul><li>It loops forever until <code>i</code> has reached the length of the serial, so it goes over all characters in the serial</li><li>The hexadecimal value of the character is then added to the <code>x</code> value</li><li><code>i</code> is incremented by one</li></ul><p><em><strong>gdb</strong></em> also confirmed that it was the hexadecimal value of each character that was added to <code>x</code>:</p><img alt="The binary was ran with 'AAAAAAA' as serial, 0x41 is the hexadecimal value of A" src="gdbug_gdb.png"><span class="image-caption">The binary was ran with 'AAAAAAA' as serial, 0x41 is the hexadecimal value of A</span><p>At the end of that loop there were more checks as you can see from this:</p><img alt="This is the last assembly picture for this challenge, no worries.." src="gdbug_serial_checks.png"><span class="image-caption">This is the last assembly picture for this challenge, no worries..</span><p>It will be checked if <code>x</code> is equals <code>0xb38</code>, so the sum of all hexadecimal values of all characters in the serial must result to <code>0xb38</code>. After this check, there are 5 more checks that are really easy to understand:</p><ul><li>The length of the serial must be <code>0x18</code></li><li>At index <code>0x4</code>, <code>0x9</code>, <code>0xe</code> and <code>0x13</code> of the serial, there should be a character with hexadecimal value <code>0x2d</code>, which is the hexadecimal value of <code>-</code>.</li></ul><p>A valid serial pattern would look like <code>xxxx-xxxx-xxxx-xxxx-xxxx</code>.<br>Based on these restrictions, we could simply create a bruteforce tool in Python:</p><figure class="highlight python"><figcaption><span>Serial bruteforcer</span><a href="https://gist.github.com/kkrypt0nn/ecd624597e00424bd462e2de583bc6f3">gdbug.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iter</span>():</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> itertools.product(ascii_uppercase, repeat=<span class="number">24</span>):</span><br><span class="line">        s = <span class="built_in">list</span>(s)</span><br><span class="line">        s[<span class="number">4</span>] = <span class="string">&quot;-&quot;</span></span><br><span class="line">        s[<span class="number">9</span>] = <span class="string">&quot;-&quot;</span></span><br><span class="line">        s[<span class="number">14</span>] = <span class="string">&quot;-&quot;</span></span><br><span class="line">        s[<span class="number">19</span>] = <span class="string">&quot;-&quot;</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;&quot;</span>.join(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> serial <span class="keyword">in</span> <span class="built_in">iter</span>():</span><br><span class="line">            x = <span class="number">0x539</span> <span class="comment"># Setup the variables</span></span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="built_in">len</span>(serial)): <span class="comment"># Go over the length of the string</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                x += <span class="built_in">ord</span>(serial[i]) <span class="comment"># Append the hexadecimal value of the current character to &#x27;x&#x27;</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Trying <span class="subst">&#123;serial&#125;</span>&quot;</span>, end=<span class="string">&quot;\r&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">hex</span>(<span class="number">0xb38</span>)==<span class="built_in">hex</span>(x)): <span class="comment"># Check if the serial is a valid serial or not</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Found: INS&#123;&#123;<span class="subst">&#123;serial&#125;</span>&#125;&#125;&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="comment"># Remove this to see all possible flags</span></span><br><span class="line"></span><br><span class="line">solve()</span><br></pre></td></tr></table></figure><p>The output was quite interesting‚Ä¶</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Found: INS&#123;AAAA-AAAA-AAAA-AAAA-AFZZ&#125;</span><br><span class="line">Found: INS&#123;AAAA-AAAA-AAAA-AAAA-AGYZ&#125;</span><br><span class="line">Found: INS&#123;AAAA-AAAA-AAAA-AAAA-AGZY&#125;</span><br><span class="line">Found: INS&#123;AAAA-AAAA-AAAA-AAAA-AHXZ&#125;</span><br><span class="line">Found: INS&#123;AAAA-AAAA-AAAA-AAAA-AHYY&#125;</span><br><span class="line">Found: INS&#123;AAAA-AAAA-AAAA-AAAA-AHZX&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The reason was quite simple, <strong>all of them were valid flags</strong>!</p><img alt="According to another player, the number is accurate" src="gdbug_meme.png"><span class="image-caption">According to another player, the number is accurate</span><h2 id="ü§ñ-Bot-Telegram-75-points"><a href="#ü§ñ-Bot-Telegram-75-points" class="headerlink" title="ü§ñ Bot Telegram - 75 points"></a>ü§ñ Bot Telegram - 75 points</h2><p>This challenge was my personal favorite. We were given a Telegram bot to chat with, and we had as challenge to exploit it. So at first I tried to execute some of the commands it has. None of them were really surprising when being executed. Then I tried with some random arguments after the command, and boom! When executing the command <code>/challs leet</code> the bot returned</p><blockquote><p>Oops an error occured : (1054, ‚ÄúUnknown column ‚Äòleet‚Äô in where clause‚Äù)</p></blockquote><p>The challenge is about an SQL injection. After trying to get the list of tables to perform an <code>UNION</code> attack the bot said that whitespaces were not allowed, only one argument was allowed. Fortunately there is an easy bypass, which is to replace all whitespaces with <strong><code>/**/</code></strong> (comments), it will then be interpreted the same as a whitespace.<br>The first discovery was that some fields are too long to be sent along in some fields, so using <code>SUBSTR()</code> did the trick. The bot ended up leaking the <code>users</code> table. </p><img src="telegram_tables.png"><img alt="I was unable to fit everything in one single picture..." src="telegram_tables_end.png"><span class="image-caption">I was unable to fit everything in one single picture...</span><p>Then we can leak the columns inside that table, there was the column <code>username</code> and <code>password</code>:</p><img alt="There were only 2 columns that could've been guessed" src="telegram_users_table.png"><span class="image-caption">There were only 2 columns that could've been guessed</span><p>So now we can simply leak the credentials for the existing row(s). There was 3 users, one of them had the username <code>admin</code> and the password, the flag, <code>INS&#123;C0ngr@tz_YoU_d3<span>$</span>eRvE_T3iS_Fl@g&#125;</code>.</p><img alt="woohoo!" src="telegram_flag.png"><span class="image-caption">woohoo!</span><p>Also, dear staff members, sorry for bullying the bot :(</p><img alt="They sent these messages exactly when the challenge was solved" src="telegram_bot_bully.png"><span class="image-caption">They sent these messages exactly when the challenge was solved</span><h2 id="üÖ∞Ô∏è-Wordle-9-points"><a href="#üÖ∞Ô∏è-Wordle-9-points" class="headerlink" title="üÖ∞Ô∏è Wordle - 9 points"></a>üÖ∞Ô∏è Wordle - 9 points</h2><p>This challenge was based on the popular <a href="https://en.wikipedia.org/wiki/Wordle">worlde game</a> where you give a word of 5 characters and then you know if a character is in the word to guess, at the correct place or not in it at all.<br>We were given a netcat server that was listening on port <code>1337</code> and we had to exploit the game. We also had a binary file that did exactly the same, so that we can debug it (<a href="files/wordle.bin">Download the file</a>).<br>My first try was to actually spam the execution of the wordle binary and get the right word at some point since we were given an output that said what the correct word was.<br>Even when getting the right word, it gave the error message. So I opened the file in a disassembler. The assembly code for the logic was very easy:</p><img alt="Some easy to understand Assembly code" src="wordle.png"><span class="image-caption">Some easy to understand Assembly code</span><p>The program moves to the address <code>0xcb1</code> if the value in <code>data_2020e0</code> is equals <code>0xdeadbeef</code>. It will then call the <code>system()</code> function with a randomly taken string from the possible words. One of these words was <code>/bin/sh</code>, so it was clear there was shell access at the end.</p><p>So let‚Äôs put <code>deadbeef</code> as user input? Well, the user input is stored in <code>data_2020c0</code>, so that won‚Äôt work. However, the user input is parsed with the unsafe <code>gets()</code> method, which means it is possible to overflow that value.<br>There is a difference of 32 bytes between both addresses. So a simple overflow of 32 bytes can let me put anything inside <code>data_2020e0</code>.<br>The payload for that overflow would be the following:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(python2 -c &#x27;print &quot;A&quot;*32 + &quot;\xef\xbe\xad\xde&quot;&#x27;; cat) | nc wordle.insomnihack.ch 1337</span><br></pre></td></tr></table></figure><p>Since there was not only <code>/bin/sh</code> in the list of words, the program had to be executed multiple times.<br>In the end the flag was <code>INS&#123;C0ngr@tulat1on5!_th3_word_was_d3adBeef!&#125;</code>.</p><h2 id="üåä-Weak-Rivest-4-7-points"><a href="#üåä-Weak-Rivest-4-7-points" class="headerlink" title="üåä Weak Rivest 4 - 7 points"></a>üåä Weak Rivest 4 - 7 points</h2><p>Weak Rivest 4 reminded me of the <a href="https://en.wikipedia.org/wiki/RC4">RC4 cipher</a>. The cipher is using a keystream and is, of course, considered as insecure.<br>We were given 3 strings, 1 plaintext and 2 ciphertexts:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pt1 = I_do_not_like_ponies</span><br><span class="line">ct1 = D058DECB037A10916E9D8B0E5345BB381AE8D8EE</span><br><span class="line">ct2 = D049E9DF182420AB5EC6BD101229940517B59CE0</span><br></pre></td></tr></table></figure><p>All the strings had the same length, we simply had to convert the <code>pt1</code> to its hexadecimal representation <code>495F646F5F6E6F745F6C696B655F706F6E696573</code> to also get a length of 40. We had one plaintext, which was encrypted with a key and resulted to one of the cipher text. The flag was most likely the second plaintext (<code>pt2</code>), which is unknown.</p><p>To solve the challenge there is the <a href="https://en.wikipedia.org/wiki/Stream_cipher_attacks#Reused_key_attack">reused key attack</a> on stream ciphers, such as RC4. To explain is shortly, XORing both cipher texts will remove the key, which then results to the same when XORing the both plaintexts. So for the challenge:</p><blockquote><p>$ct1 \oplus ct2$ &#x3D; $pt1 \oplus pt2$</p></blockquote><p>So to get <code>pt2</code> we simply need to:</p><ul><li>Take every time 2 characters from both <code>ct1</code> and <code>ct2</code></li><li>Convert them to a hexadecimal number</li><li>XOR them together to get a <code>result</code></li><li>Get 2 characters from <code>pt1</code></li><li>Find a hexadecimal number that, if XORed with the 2 characters taken from <code>pt1</code>, leads to the same <code>result</code></li><li>Append the character corresponding to that value to a <code>flag</code> variable.</li></ul><p>I ended up making the following Python script:</p><figure class="highlight python"><figcaption><span>RC4 bruteforcer</span><a href="https://gist.github.com/kkrypt0nn/b59f814cc800a402ab510a693efcda6c">rc4.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">pt1 = <span class="string">&quot;495F646F5F6E6F745F6C696B655F706F6E696573&quot;</span></span><br><span class="line">ct1 = <span class="string">&quot;D058DECB037A10916E9D8B0E5345BB381AE8D8EE&quot;</span></span><br><span class="line">ct2 = <span class="string">&quot;D049E9DF182420AB5EC6BD101229940517B59CE0&quot;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ct1) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">    ct1_pair = <span class="built_in">int</span>(<span class="string">&quot;0x&quot;</span> + ct1[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="comment"># Get two characters from ct1</span></span><br><span class="line">    ct2_pair = <span class="built_in">int</span>(<span class="string">&quot;0x&quot;</span> + ct2[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="comment"># Get two characters from ct2</span></span><br><span class="line">    result = ct1_pair ^ ct2_pair</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0x0</span>, <span class="number">0x7f</span>): <span class="comment"># Loop over all characters in the ASCII table</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">int</span>(<span class="string">&quot;0x&quot;</span> + pt1[i:i+<span class="number">2</span>], <span class="number">16</span>) ^ k) == result: <span class="comment"># Check if the XORed number is the same as the result</span></span><br><span class="line">            flag += <span class="built_in">chr</span>(k)</span><br><span class="line">            <span class="built_in">print</span>(flag, end=<span class="string">&quot;\r&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>) <span class="comment"># That is just to look cool üòé</span></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>This resulted in the following flag: <code>INS&#123;D0_No7_u<span>$</span>3_Rc4!&#125;</code></p><h2 id="üîÆ-Magic-Words-7-points"><a href="#üîÆ-Magic-Words-7-points" class="headerlink" title="üîÆ Magic Words - 7 points"></a>üîÆ Magic Words - 7 points</h2><p>For this challenge we were given a link to a website. The website asked for a sentence, so basically we had to get this sentence. When looking at the source code there was some checks, so the first thing to do was to create the same file on the local machine.<br>Then simply take each check one by one and get the words in each paragraph. Then recreate the checks locally and execute the script.</p><figure class="highlight js"><figcaption><span>Find the magic words</span><a href="https://gist.github.com/kkrypt0nn/8743a257eed02449857313a819632bdc">magic_words.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// More code above...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This is the needed code</span></span><br><span class="line">p1 = <span class="string">&#x27;Later, on my walk, I wondered why I felt I had to be suspicious of ‚Äònormality‚Äô. The striking thing about the normal is that there is nothing normal about it: normality is the gentrification of ordinary madness ‚Äì ask an Surrealist. In analysis ‚Äòthe normal child‚Äô is often synonymous with the obedient good child, the one who only wants to please parents and develops what Winnicott called ‚Äòa false self‚Äô&#x27;</span>;</span><br><span class="line">p2 = <span class="string">&#x27;In the hospital men‚Äôs room, as I‚Äôm washing my hands, I glance in the mirror. The man I see is not so much me as my father. When did he show up? There is no soap; I rub hand sanitizer into my face‚Äìit burns. I nearly drown myself in the sink trying to rinse it off.&#x27;</span>;</span><br><span class="line">p3 = <span class="string">&#x27;Your only chance of survival, if you are sincerely smitten, lies in hiding this fact from the woman you love, of feigning a casual detachment under all circumstances. What sadness there is in this simple observation! What an accusation against man! However, it had never occurred to me to contest this law, nor to imagine disobeying it: love makes you weak, and the weaker of the two is oppressed, tortured and finally killed by the other, who in his or her turn oppresses, tortures and kills without having evil intentions, without even getting pleasure from it, with complete indifference; that‚Äôs what men, normally, call love.&#x27;</span>;</span><br><span class="line">p4 = <span class="string">&#x27;Looking back on those incidents, he was always appalled by the memory of his passivity, hard though it was to see what else he could have done. He could have refused to pay for such gravy damage to his room, could have refused to change his shoes, could have refused to kneel to supplicate for his B.A.&#x27;</span>;</span><br><span class="line">p5 = <span class="string">&#x27;The way he went after that plump sister in the lace tucker, was an outrage on the credulity of human nature. Knocking down the fire-irons, tumbling over the chairs, bumping against the piano, smothering himself among the curtains, wherever she went, there went he. He always knew where the plump sister was. He wouldn‚Äôt catch anybody else. If you had fallen up against him (as some of them did), on purpose, he would have made a feint of endeavouring to seize you, which would have been an affront to your understanding, and would instantly have sidled off in the direction of the plump sister. She often cried out that it wasn‚Äôt fair; and it really was not.&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> response = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> words = p1.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; words.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (words[i] == <span class="string">&#x27;please&#x27;</span>) response += words[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> words = p2.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; words.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">beautify</span>(words[i]) == <span class="string">&#x27;siqz&#x27;</span>) response += <span class="string">&#x27; &#x27;</span> + words[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> words = p3.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; words.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">uglify</span>(words[i]) == <span class="string">&#x27;MDA=&#x27;</span>) response += <span class="string">&#x27; &#x27;</span> + words[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> words = p4.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; words.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">digitalize</span>(words[i]) == <span class="string">&#x27;746865&#x27;</span>) response += <span class="string">&#x27; &#x27;</span> + words[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> words = p5.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; words.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">mystify</span>(words[i]) == <span class="string">&#x27;c83b72dd001482ce10f0b106c7a0ed0e&#x27;</span>) response += <span class="string">&#x27; &#x27;</span> + words[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br></pre></td></tr></table></figure><p>Then the result was <code>please show of if in of is in an it to me to to of is by in or the way</code>. There was just to find a good word that would fit in the sentence for <code>pleas show [of if in of is in an it to me to to of is by in or] the way</code>, the best is definitely <code>please show me the way</code>.</p><p>When submitting that, the flag (<code>INS&#123;jQu3ry_1<span>$</span>_Fr3@kiNg_C0oL&#125;</code>) was given as response.</p><h2 id="üëã-Welcome-challenge-6-points"><a href="#üëã-Welcome-challenge-6-points" class="headerlink" title="üëã Welcome challenge - 6 points"></a>üëã Welcome challenge - 6 points</h2><p>We get a link to a GitLab repository where there are instructions to follow to actually solve the challenge which included commiting changes.<br>After folowing the steps the first time my shell looked kind of, weird:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are infected üßü $</span><br></pre></td></tr></table></figure><p>But I wasn‚Äôt the only one who got this joke:</p><img alt="The staff was building a botnet, no worries" src="welcome.png"><span class="image-caption">The staff was building a botnet, no worries</span><p>After checking where this came from, it was located in <code>inso/.circleci/pre-commit</code>, there also was a <code>exec $SHELL</code> command at the end of the file, to make sure you see that. By simply removing the lines that changed my <code>PS1</code> variable and removing the <code>exec $SHELL</code> command, I was able to get the flag in return.<br>The flag was given with a response to a failed commit like the following: <code>remote: INS&#123;S0_F4r_S0_g00d&#125;</code>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;Banner.webp&quot;/&gt;

&lt;p&gt;The Insomni‚Äôhack 2022 CTF is a CTF hosted during the Insomni‚Äôhack conference in Geneva, Switzerland. You had to</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://krypton.ninja/tags/ctf/"/>
    
    <category term="write-up" scheme="https://krypton.ninja/tags/write-up/"/>
    
    <category term="insomni&#39;hack" scheme="https://krypton.ninja/tags/insomni-hack/"/>
    
    <category term="insomnihack" scheme="https://krypton.ninja/tags/insomnihack/"/>
    
  </entry>
  
  <entry>
    <title>üîí How I protected my Minecraft cheating client</title>
    <link href="https://krypton.ninja/2022/01/30/How-I-protected-my-Minecraft-cheating-client/"/>
    <id>https://krypton.ninja/2022/01/30/How-I-protected-my-Minecraft-cheating-client/</id>
    <published>2022-01-30T21:05:12.000Z</published>
    <updated>2022-03-27T15:39:54.813Z</updated>
    
    <content type="html"><![CDATA[<img src="Banner.webp"/><p>So for those of you who know me for quite a long time, they know I‚Äôve been cheating in Minecraft for quite some time. Yes, I cheated in a block game. But I didn‚Äôt just installed a Minecraft cheating client, went on a server and killed everyone, I made my own cheating client. Now this might sound even more <em>cringe</em>, but it taught me a lot, especially a lot about Java.</p><h2 id="üßë‚Äçüíª-Cheating-client"><a href="#üßë‚Äçüíª-Cheating-client" class="headerlink" title="üßë‚Äçüíª Cheating client"></a>üßë‚Äçüíª Cheating client</h2><p>So before I explain how I implemented some protection to my, never released nor finished, client I would like to explain how a cheating client works.<br>When you first want to make a client you need to know what you will have to code and where. The answer is pretty simple: You add your own code to the official Minecraft client. You may not know but, there is the <a href="http://www.modcoderpack.com/">Minecraft Coder Pack</a> publicly available which gives anyone access to the source code of Minecraft itself.</p><img src="Main-Menu.png" alt="The main menu of my old cheating client, similar to the normal one"/><span class="image-caption">The main menu of my old cheating client, similar to the normal one</span><p>So now that we know <em>where</em> to code, we need to know <em>how</em> and <em>what</em> to code. The answer to the how question is very simple as Minecraft is coded in Java, it leaves you pretty much one possibility: You need to code your client in a programming language with JVM, the most popular ones are Kotlin and Java of course. For it to be easier as I had some small knowledge in Java, I decided to go for Java. Now comes the question to what to code. Again very simple as there are components that most cheating clients have:</p><ul><li><strong>Click GUI</strong></li><li><strong>Commands</strong></li><li><strong>Events</strong></li><li><strong>Keybindings</strong></li><li><strong>Modules</strong></li></ul><p>Once this is known, we can start to code the client. Once you‚Äôve finished it, you can either you make it public, paid or completely private. Depending on what you choose you will require different type of protection. I wanted to go for a paid private client, but this project never came to a conclusion.<br>However, I am quite happy looking back at the different security layers I‚Äôve implemented, which are definitely not the best. But the past me of 5 years ago was proud of :) Of course, all of these can be bypassed and many other things can be done, but again; I was happy I did this :)</p><h2 id="üîê-Login"><a href="#üîê-Login" class="headerlink" title="üîê Login"></a>üîê Login</h2><img src="Login.png" alt="My password was 'a' :D"/><span class="image-caption">My password was 'a' :D</span><p>One of the most used and known protection is to set up a login method. Of course for that you need a web server, as you don‚Äôt want to hard code the credentials inside your client. So I created some simple PHP files to handle the different types of logins I‚Äôve decided to implement.</p><h3 id="Username-amp-password"><a href="#Username-amp-password" class="headerlink" title="Username &amp; password"></a>Username &amp; password</h3><p>This was the first method I‚Äôve implemented. The only thing I had to do was to create a login endpoint to my website and let the users login with their username and password from the client. The client would then send the username and password to the server via the headers and the server would check if the credentials are correct. The server would then return a JSON object as response to say whether the given credentials were correct or not. The JSON object would look like this:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Login successful&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Krypton&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uuid&quot;</span><span class="punctuation">:</span> <span class="number">7331</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4kzAEOcyCbrTdtIgdXzIgsrEwGGadrZNJigGkW33llSpuhkh&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Most of the fields, such as <code>role</code> or <code>username</code> were just so that it could later be used directly within the client and display such information for example on the main menu as you‚Äôve seen above. The <code>access_token</code> is the token that is used to authenticate the user for configurations and other things to download that are only accessible for this user.</p><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>As shown on the JSON object above, a <code>access_token</code> field is given in the response. This token is used not only for downloading configurations or also for other things, but this token is then later saved on the local machine and used for automatic login, so that you don‚Äôt need to always give in your username and password. This was a <em>‚ÄúRemember me‚Äù</em> option. So the login method using the token was much easier and user-friendly.<br>To reset that token you simply had to change your password, and then you would have to log in again to get the new access token overwritten into the local machine.</p><h2 id="üíΩ-Hardware-identification-HWID"><a href="#üíΩ-Hardware-identification-HWID" class="headerlink" title="üíΩ Hardware identification (HWID)"></a>üíΩ Hardware identification (HWID)</h2><p>Of course a simple login with username and password are not always the best option, that‚Äôs where I started to use <strong>hardware identification</strong> to make sure the correct user is logging in. The HWID is calculated based on different hardware components, which then gives a unique ID for each machine. Of course this HWID can be easily spoofed, but it was a simple check that costs not a lot of time to implement and can only do good things. For each request made from the client there was also this HWID of the user sent to the server. The server would then check if the HWID is correct and if so, it would return the different JSON as shown above. A HWID looks like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111919518612-1211951819-1111919518612-1-1-1-1-1-1-11313-11519-124</span><br></pre></td></tr></table></figure><p>I‚Äôve made a basic <a href="https://github.com/kkrypt0nn/Basic-HWID-Grabber">repository public</a> about how to get such an HWID easily. Of course the method I‚Äôve implemented into my client was slightly different from the public repository, but it‚Äôs still pretty simple.<br>This was another simple way to make sure the right person was logging to the right user and sharing accounts.</p><h2 id="üíÄ-Kill-switch"><a href="#üíÄ-Kill-switch" class="headerlink" title="üíÄ Kill switch"></a>üíÄ Kill switch</h2><p>The kill switch was the last <em>security layer</em> I‚Äôve implemented. It was very basic and useful in case I wanted to prevent anyone from logging in. Once every, for example, 5 minutes the client make a simple web request to the kill switch endpoint to make sure the kill switch is not activated. If it was activated, then the client would automatically log out and shut down Minecraft. It was something very simple that I could edit at any time. The JSON object that was being returned was very simple:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kill switch is enabled&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">403</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;kill_switch&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="„äôÔ∏è-Obfuscation"><a href="#„äôÔ∏è-Obfuscation" class="headerlink" title="„äôÔ∏è Obfuscation"></a>„äôÔ∏è Obfuscation</h2><p>Obfuscating my client would‚Äôve been the last securiy I could‚Äôve implemented when releasing it. Since I never released this client, I‚Äôve never really did it. However, I can explain how this works!<br>In simple words you turn your code unreadable for humans, but still executable and fully working. Some example of so called obfuscators is <a href="https://guardsquare.com/proguard">ProGuard</a>.<br>Here would be the short version of an obfuscated ‚ÄúHello world‚Äù program from <a href="https://github.com/superblaubeere27/obfuscator">this</a> obfuscator, to get the full result you can check <a href="https://pastebin.com/RFHtgPtX">this link</a>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] array)</span> &#123;</span><br><span class="line">    <span class="comment">// invokedynamic(1:(Ljava/io/PrintStream;Ljava/lang/String;)V, invokedynamic(0:()Ljava/io/PrintStream;), HelloWorld.llII[HelloWorld.lllI[0]])</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">lllllllIlIllIII</span> <span class="operator">=</span> HelloWorld.lllI[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (llIll((<span class="type">int</span>)lllllllIlIllIII, HelloWorld.lllI[<span class="number">1</span>])) &#123;</span><br><span class="line">      <span class="comment">// invokedynamic(2:(Ljava/io/PrintStream;I)V, invokedynamic(0:()Ljava/io/PrintStream;), lllllllIlIllIII)</span></span><br><span class="line">      ++lllllllIlIllIII;</span><br><span class="line">      <span class="string">&quot;&quot;</span>.length();</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot; &quot;</span>.length() == (<span class="string">&quot; &quot;</span>.length() &lt;&lt; (<span class="string">&quot;   &quot;</span>.length() &lt;&lt; <span class="string">&quot; &quot;</span>.length()) &amp; ~(<span class="string">&quot; &quot;</span>.length() &lt;&lt; (<span class="string">&quot;   &quot;</span>.length() &lt;&lt; <span class="string">&quot; &quot;</span>.length())))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I think you get the idea of what an obfuscator does :)</p><h2 id="üìú-Conclusion"><a href="#üìú-Conclusion" class="headerlink" title="üìú Conclusion"></a>üìú Conclusion</h2><p>This was pretty much how my client was designed. I‚Äôve made it as simple as possible, so that it can be used by everyone. I was very happy about the result back then, but I‚Äôve never released my client to the public. It was a great time working on this project but everything comes to an end right?<br>Maybe I will come back one day in coding such a client, or maybe a normal legit client, who knows :D</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;Banner.webp&quot;/&gt;

&lt;p&gt;So for those of you who know me for quite a long time, they know I‚Äôve been cheating in Minecraft for quite some</summary>
      
    
    
    
    
    <category term="minecraft" scheme="https://krypton.ninja/tags/minecraft/"/>
    
    <category term="cheating" scheme="https://krypton.ninja/tags/cheating/"/>
    
    <category term="client" scheme="https://krypton.ninja/tags/client/"/>
    
    <category term="java" scheme="https://krypton.ninja/tags/java/"/>
    
    <category term="security" scheme="https://krypton.ninja/tags/security/"/>
    
    <category term="protection" scheme="https://krypton.ninja/tags/protection/"/>
    
    <category term="obfuscation" scheme="https://krypton.ninja/tags/obfuscation/"/>
    
  </entry>
  
  <entry>
    <title>‚ùî What is Go?</title>
    <link href="https://krypton.ninja/2021/10/16/What-is-Go/"/>
    <id>https://krypton.ninja/2021/10/16/What-is-Go/</id>
    <published>2021-10-16T15:33:25.000Z</published>
    <updated>2022-03-27T15:39:54.813Z</updated>
    
    <content type="html"><![CDATA[<img src="Banner.webp"/><p>When I first read about Go and what it offers I decided to start and learn it. After some time I realized it has some amazing potential, and I wanted to share it here with you. Note that this is just a short blog post to show and explain what Go is and how it works, it‚Äôs not supposed to be a Wikipedia article üòâ</p><h2 id="üìú-About-Go"><a href="#üìú-About-Go" class="headerlink" title="üìú About Go"></a>üìú About Go</h2><p>Go is a statically typed and compiled programming language. Go is designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. Syntactically Go is very similar to C, but it has memory safety, garbage collection, structural typing and many other advantages. It‚Äôs an easy language for developers to learn quickly.</p><h2 id="ü§î-Why-has-Go-been-created"><a href="#ü§î-Why-has-Go-been-created" class="headerlink" title="ü§î Why has Go been created?"></a>ü§î Why has Go been created?</h2><p>Go was intended as a language for writing server programs that would be easy to maintain over time. It‚Äôs now being used for writing light-weight microservices and is being used for generating APIs that will later on interact with the front-end. So in short words I could say that it was mainly created for APIs, web servers, frameworks for web applications, etc.</p><h2 id="üéñÔ∏è-Why-is-Go-‚Äúso-good‚Äù"><a href="#üéñÔ∏è-Why-is-Go-‚Äúso-good‚Äù" class="headerlink" title="üéñÔ∏è Why is Go ‚Äúso good‚Äù?"></a>üéñÔ∏è Why is Go <em>‚Äúso good‚Äù</em>?</h2><p>Its easy concurrency is really easy to make and include in your projects. As you may know, network applications are really dependent of concurrency, and that‚Äôs why Go‚Äôs networking features makes it even easier and better.<br><br>When declaring interfaces in Go, you don‚Äôt need to add like in other language the keyword <code>implements</code> or anything similar. Which means we can create an interface and simply make another object implement it, we simply need to make sure that all the methods from the interface are in the object implementing it, just like any other language.<br><br>When looking at <a href="https://pkg.go.dev/std">Go‚Äôs standard library</a> we can see that we don‚Äôt always specifically need to get a third-party library. It goes from parsing flags when executing your program to testing.<br><br>Since Go get compiled into machine code, we need a compiler. For Go, the compilation time is quite fast compared to some other languages, one reason for that is that Go does not allow unused imports. If you want a comparison to another language, Go is significantly faster than C++ at compilation time, however it also results in Go‚Äôs binary to be bigger in terms of size.<br><br>And as always, who does not like programming languages that are cross-platform? Well, Go got you covered for that, from Android to Linux to Windows, just run <code>go tool dist list</code> in your terminal to see it.</p><h2 id="ü§Ø-How-hard-is-Go"><a href="#ü§Ø-How-hard-is-Go" class="headerlink" title="ü§Ø How hard is Go?"></a>ü§Ø How hard is Go?</h2><p>This is a question you often get asked when you learn a new programming language and other people you know may want to learn it. For Go, it‚Äôs a simple answer because the language itself is simple. Go‚Äôs syntax is quite small compared to many other languages and therefore easier to remember. Most of the things can be remembered quite easily and this means you won‚Äôt need to spend a lot of time at looking things up. You can start taking a look at Go <a href="https://tour.golang.org/">here</a>.</p><h2 id="üëã-A-‚ÄúHello-world-‚Äù-in-Go"><a href="#üëã-A-‚ÄúHello-world-‚Äù-in-Go" class="headerlink" title="üëã A ‚ÄúHello world!‚Äù in Go"></a>üëã A ‚ÄúHello world!‚Äù in Go</h2><p>A hello world is often included when you explain what a language is, so here it is:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="üåê-Did-I-hear-web-server"><a href="#üåê-Did-I-hear-web-server" class="headerlink" title="üåê Did I hear web server?"></a>üåê Did I hear web server?</h2><p>Correct! Go is widely used for web servers and&#x2F;or APIs. This can go from a very basic REST API to using Websockets. In comparison to other languages, Go does not need some overcomplicated web framework, Go‚Äôs standard library already has this implemented and ready for us. Of course there are third party libraries that implements some additions.</p><p>To create a very basic web server we need to import two default libraries like the following:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span> <span class="comment">// This is to give output when requesting a page (also used in the hello world example)</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span> <span class="comment">// This is needed to handle requests, etc.</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Now we can create a simple handler that will listen to the port <code>1337</code> and register a new <code>/hello</code> route.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloWorld</span><span class="params">(response http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(response, <span class="string">&quot;Hello from the Gopher side!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, helloWorld)</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:1337&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now run the code with <code>go run main.go</code> and go to <a href="http://127.0.0.1:1337/hello">127.0.0.1:1337&#x2F;hello</a>.</p><img src="Webserver.png" alt="As you can see the web server works like a charm!"/><span class="image-caption">As you can see the web server works like a charm!</span><p>In around 3-7 lines of code we managed to start a web server and create a route that will display some text.<br><br>Now it‚Äôs up to you to make your creative projects :)</p><h2 id="ü•à-What-is-Go‚Äôs-concurrency"><a href="#ü•à-What-is-Go‚Äôs-concurrency" class="headerlink" title="ü•à What is Go‚Äôs concurrency?"></a>ü•à What is Go‚Äôs concurrency?</h2><h3 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h3><p>Python developers may know what <a href="https://docs.python.org/3/library/asyncio-task.html">coroutines</a> are, however to include them in your project you need an additional library called <a href="https://docs.python.org/3/library/asyncio.html">asyncio</a>. Yes that‚Äôs not a big deal as most of the Python features relies on libraries anyways.</p><p>The difference with Go, is that you can easily create a so called <strong>Goroutine</strong> to make functions run concurrently. Here‚Äôs a very easy example on how to create a Goroutine:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">echo</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">        fmt.Println(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> echo(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">    echo(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you may notice, I just had to add the keyword <code>go</code> before calling the function to turn the function into a Goroutine. And of course I can call the <code>echo()</code> function without having to mark it as a Goroutine. After running the code, here is a sample output I got:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">world</span><br><span class="line">world</span><br><span class="line">Hello</span><br><span class="line">world</span><br><span class="line">Hello</span><br><span class="line">Hello</span><br><span class="line">world</span><br><span class="line">world</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p>You can clearly see, that the <code>echo(&quot;Hello&quot;)</code> method runs without having to wait for the Goroutine to end, this is concurrency.</p><h3 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h3><p>What makes Go‚Äôs concurrency different and unique from different languages are so called <strong>channels</strong>. You can see channels as being pipes that transfer data. This is used to send values and data from one goroutine to another one, or just to get data back from a goroutine.<br>Take this example:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(list []<span class="type">int</span>, channel <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> list &#123;</span><br><span class="line">        sum += value</span><br><span class="line">    &#125;</span><br><span class="line">    channel &lt;- sum <span class="comment">// Here we send the sum to the channel</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    list1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    list2 := []<span class="type">int</span>&#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">    channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// Here we create a channel that accepts integers</span></span><br><span class="line">    <span class="keyword">go</span> sum(list1, channel)</span><br><span class="line">    <span class="keyword">go</span> sum(list2, channel)</span><br><span class="line">    x := &lt;-channel <span class="comment">// Here we receive data from the channel</span></span><br><span class="line">    y := &lt;-channel</span><br><span class="line"></span><br><span class="line">    fmt.Println(x, y, x+y) <span class="comment">// Output: 24 6 30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This small example simply sums the numbers from a slice and puts the work between two goroutines so that they are being calculated concurrently and is therefore faster. Once both goroutines gave their output, it will calculate the final result and print it in the console. The arrows such as <code>&lt;-</code> simply describe from where to where the data goes, so either from the channel to the variable or from the variable in the channel.</p><h2 id="üå≥-Does-Go-have-objects"><a href="#üå≥-Does-Go-have-objects" class="headerlink" title="üå≥ Does Go have objects?"></a>üå≥ Does Go have objects?</h2><p>Of course! There‚Äôs just one slight difference here. Go doesn‚Äôt directly have a type <em><code>object</code></em>, but they have a type that matches the definition of a data structure that integrates both code and behavior. It‚Äôs called a <em><code>struct</code></em>. Let me show you a very simple example.</p><h3 id="Structs"><a href="#Structs" class="headerlink" title="Structs"></a>Structs</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Width  <span class="type">int</span></span><br><span class="line">    Height <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The &#x27;(rect *Rectangle)&#x27; before the method name shows to which object the method will operate, in this case the &#x27;rectangle&#x27; object.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rect *Rectangle)</span></span> Area() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rect.Width * rect.Height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rect := Rectangle&#123;Width: <span class="number">10</span>, Height: <span class="number">5</span>&#125;</span><br><span class="line">    <span class="comment">// As expected, the output is 50.</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Area: &quot;</span>, rect.Area())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Implicit-inheritance"><a href="#Implicit-inheritance" class="headerlink" title="Implicit inheritance"></a>Implicit inheritance</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">    Area() <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Width  <span class="type">float64</span></span><br><span class="line">    Height <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rect Rectangle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rect.Width * rect.Height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s Shape = Rectangle&#123;Width: <span class="number">10</span>, Height: <span class="number">50</span>&#125;</span><br><span class="line">    fmt.Println(s.Area())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see from the example above, the struct <code>Rectangle</code> implements the interface <code>Shape</code> but nowhere in the code it‚Äôs clearly written, that it implements it.</p><h2 id="üòé-Popular-open-source-projects"><a href="#üòé-Popular-open-source-projects" class="headerlink" title="üòé Popular open-source projects"></a>üòé Popular open-source projects</h2><p>As you might have expected, there are some really popular projects that are using Go. Here is just a small list among a lot of other projects:</p><ul><li><a href="https://github.com/docker/compose">Docker Compose</a></li><li><a href="https://github.com/coreos/coreos-assembler">Fedora CoreOS</a></li><li><a href="https://github.com/gohugoio/hugo">Hugo</a></li><li><a href="https://github.com/kubernetes/kubernetes">Kubernetes</a></li></ul><h2 id="üè´-How-do-I-get-started"><a href="#üè´-How-do-I-get-started" class="headerlink" title="üè´ How do I get started?"></a>üè´ How do I get started?</h2><img src="Gophers.jpg" alt="Be part of the Gophers :D"/><span class="image-caption">Be part of the Gophers :D</span><p>I‚Äôm glad you‚Äôre interested in learning more about Go by yourself!</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>The installation is really easy regardless of the operating system you have, simply go to the <a href="https://golang.org/doc/install">download page</a> and follow the instructions. Oh and remember, Go works on every operating system!</p><h3 id="Learning-resources"><a href="#Learning-resources" class="headerlink" title="Learning resources"></a>Learning resources</h3><p>I don‚Äôt really have specific learning resources but these are the things I‚Äôve used to start to learn and code in Go:</p><ul><li><a href="https://tour.golang.org/">A tour of Go</a></li><li><a href="https://codecademy.com/learn/learn-go">Codecademy</a></li><li><a href="https://golang.org/doc/effective_go">Effective Go</a></li><li><a href="https://golang.org/doc">Go‚Äôs Documentation</a></li><li><a href="https://gobyexample.com/">Go by Example</a></li><li><a href="https://sololearn.com/learning/1164">Sololearn</a> <em>(My favorite as you get a better overview of concurrency)</em></li></ul><p>I‚Äôd be happy to see you become part of the Gophers!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;Banner.webp&quot;/&gt;

&lt;p&gt;When I first read about Go and what it offers I decided to start and learn it. After some time I realized it ha</summary>
      
    
    
    
    
    <category term="go" scheme="https://krypton.ninja/tags/go/"/>
    
    <category term="golang" scheme="https://krypton.ninja/tags/golang/"/>
    
    <category term="learning" scheme="https://krypton.ninja/tags/learning/"/>
    
    <category term="what is" scheme="https://krypton.ninja/tags/what-is/"/>
    
    <category term="google" scheme="https://krypton.ninja/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>üç™ How cookies can manipulate new customers</title>
    <link href="https://krypton.ninja/2021/08/23/How-cookies-can-manipulate-new-customers/"/>
    <id>https://krypton.ninja/2021/08/23/How-cookies-can-manipulate-new-customers/</id>
    <published>2021-08-23T15:49:38.000Z</published>
    <updated>2022-03-27T15:39:54.810Z</updated>
    
    <content type="html"><![CDATA[<img src="Banner.webp"/><p>Who has not been attracted by prices of a product on a website? How cheap this product is compared to another website, or the opposite; how expensive the price is compared to other websites.</p><p>I have been a <em>victim</em> of price manipulation a few months ago and decided to share it so that other people don‚Äôt get manipulated like me; however at the end I won üòé</p><h2 id="üìú-The-Story"><a href="#üìú-The-Story" class="headerlink" title="üìú The Story"></a>üìú The Story</h2><p><em>Before anything starts, I wanted to let you know I‚Äôve hidden as much information as possible to not identify the seller.</em></p><p>So I‚Äôve ordered contact lenses for myself quite some time ago. I remember the price was around 70 CHF (~ 76 USD) and I‚Äôve found this price thanks to <a href="https://toppreise.ch/">Toppreise</a>, which is a website to compare prices of a product based on many swiss shops and sellers.<br>I wanted to order the same pack of 90 lenses a few months ago and have seen that the price had changed; it was around 90 CHF (~ 98 USD), I still added the product in my cart.<br>After looking on Toppreise again, the price was still marked as the price I‚Äôve paid the last time I‚Äôve ordered my lenses. After clicking on the link provided by Toppreise to purchase these lenses I see the ~ 70 CHF price again! After reloading my page on the previous cart it also was ~ 70 CHF!<br>What could‚Äôve gone wrong in my previous steps to purchase my lenses ü§î</p><h2 id="ü§†-My-Investigation"><a href="#ü§†-My-Investigation" class="headerlink" title="ü§† My Investigation"></a>ü§† My Investigation</h2><p>The fact that the price of the lenses changed upon reload of the cart really brought me into thinking of how they could‚Äôve done this.</p><h3 id="The-Start"><a href="#The-Start" class="headerlink" title="The Start"></a>The Start</h3><p>So I started by opening a <strong>private</strong> tab in my browser to look at the price of the lenses again. The price still was the 90-ish CHF of my previous attempt:</p><img src="Price-Before.png" alt="The price before"/><span class="image-caption">The price before</span><p>So I went to the website to compare the prices and there was only one offer for the pack anyways, which was around 70 CHF</p><img src="Product-Compared.png" alt="The price on the comparing website"/><span class="image-caption">The price on the comparing website</span><p>I decided to click on the link to get to the offer, and the price had changed to the 70-ish CHF again!</p><img src="Price-After.png" alt="The price after"/><span class="image-caption">The price after</span><h3 id="The-Investigation"><a href="#The-Investigation" class="headerlink" title="The Investigation"></a>The Investigation</h3><p>Now I definitely knew there was something with that link going on, it‚Äôs almost impossible to click on a link and get a completely different price for the exact same product‚Ä¶<br>So I took the link and always closed my browser, opened a new private tab and pasted the link in it always with one GET parameter removed. I did this until the price didn‚Äôt change anymore, which would mean this is the important parameter. The link was quite big and looking to something like that:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.website.ch/product/cl/1337?VariationSKU=37&amp;ish_cs=282075&amp;awc=464935_228990_345003&amp;utm_source=Affiliate_Window&amp;utm_medium=Affiliate&amp;utm_campaign=512227&amp;wt_mc=am129545&amp;utm_id=635365_987691_482693</span><br></pre></td></tr></table></figure><p>The important parameter ended up being the parameter <code>ish_cs</code>. Upon further research I realized this parameter would give me no additional information.<br>I decided to take a look at the cookies of the website üç™</p><h3 id="The-Discovery-amp-Ending"><a href="#The-Discovery-amp-Ending" class="headerlink" title="The Discovery &amp; Ending"></a>The Discovery &amp; Ending</h3><p>It didn‚Äôt really took me long to see that new cookies have been added after using that parameter on the URL.<br>These were the cookies before:</p><img src="Cookies-Before.jpg" alt="The cookies before"/><span class="image-caption">The cookies before</span><p>And these the cookies after:</p><img src="Cookies-After.jpg" alt="The cookies after"/><span class="image-caption">The cookies after</span><p>As you can see by my awesome hand drawing there‚Äôs a new temporary cookie named <code>cs_</code>, quite close to our previous parameter <code>ish_cs</code> üòè</p><p>After removing this cookie from my saved cookies it showed the expensive price again :D</p><h2 id="ü•≥-The-Victory"><a href="#ü•≥-The-Victory" class="headerlink" title="ü•≥ The Victory"></a>ü•≥ The Victory</h2><p>After knowing the price of the product would be lower when you have this cookie I‚Äôve decided to order it; it ended up coming to me with written on the receipt: 73 CHF.</p><p>What I‚Äôve learned from this small investigation is that you should always to try to compare the product you want to purchase with other shops and sellers, at least in Switzerland. At the end you end up paying less for exactly the same. Now if this is an attempt from the shop to gain new customers because of attractive prices will always be unknown to me‚Ä¶ But one thing is for sure, they don‚Äôt give to everyone the same price on their products üòä</p><p><br><em>PS: This is my first post, so I don‚Äôt really know how to make it entertaining and looking style wise good, any suggestions will be appreciated.</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;Banner.webp&quot;/&gt;

&lt;p&gt;Who has not been attracted by prices of a product on a website? How cheap this product is compared to another w</summary>
      
    
    
    
    
    <category term="cookies" scheme="https://krypton.ninja/tags/cookies/"/>
    
    <category term="manipulation" scheme="https://krypton.ninja/tags/manipulation/"/>
    
    <category term="customers manipulation" scheme="https://krypton.ninja/tags/customers-manipulation/"/>
    
    <category term="customers" scheme="https://krypton.ninja/tags/customers/"/>
    
  </entry>
  
</feed>
